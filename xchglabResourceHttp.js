// Generated by CoffeeScript 1.6.2
(function() {
  angular.module("xchglabResourceHttp", []).factory("$xchglabResourceHttp", [
    "XCHGLAB_CONFIG", "$http", function(XCHGLAB_CONFIG, $http) {
      var XchgLabResourceFactory;

      XchgLabResourceFactory = function(collectionName) {
        var Resource, collectionUrl, config, defaultParams, preparyQueryParam, promiseThen, resourceRespTransform, resourcesArrayRespTransform, url;

        config = angular.extend({
          BASE_URL: "http://exi.xchg.com/api"
        }, XCHGLAB_CONFIG);
        url = config.BASE_URL;
        collectionUrl = url + "/" + collectionName;
        defaultParams = {};
        $http.defaults.headers.common['Authorization'] = 'Basic admin@orgtec.com:xxxxxx';
        resourceRespTransform = function(data) {
          return new Resource(data);
        };
        resourcesArrayRespTransform = function(data) {
          var i, items;

          console.log('hello');
          console.log(data);
          if ((data != null ? data._items : void 0) != null) {
            items = [];
            i = 0;
            while (i < data['_items'].length) {
              items.push(new Resource(data['_items'][i]));
              i++;
            }
            data['_items'] = items;
          }
          return data;
        };
        promiseThen = function(httpPromise, successcb, errorcb, fransformFn) {
          return httpPromise.then((function(response) {
            var result;

            result = fransformFn(response.data);
            (successcb || angular.noop)(result, response.status, response.headers, response.config);
            return result;
          }), function(response) {
            (errorcb || angular.noop)(undefined, response.status, response.headers, response.config);
            return undefined;
          });
        };
        preparyQueryParam = function(queryJson) {
          if (angular.isObject(queryJson) && !angular.equals(queryJson, {})) {
            return {
              q: JSON.stringify(queryJson)
            };
          } else {
            return {};
          }
        };
        Resource = function(data) {
          return angular.extend(this, data);
        };
        Resource.query = function(queryJson, options, successcb, errorcb) {
          var httpPromise, prepareOptions, requestParams;

          prepareOptions = function(options) {
            var optionsMapping, optionsTranslated;

            optionsMapping = {
              sort: "s",
              limit: "l",
              fields: "f",
              skip: "sk"
            };
            optionsTranslated = {};
            if (options && !angular.equals(options, {})) {
              angular.forEach(optionsMapping, function(targetOption, sourceOption) {
                if (angular.isDefined(options[sourceOption])) {
                  if (angular.isObject(options[sourceOption])) {
                    return optionsTranslated[targetOption] = JSON.stringify(options[sourceOption]);
                  } else {
                    return optionsTranslated[targetOption] = options[sourceOption];
                  }
                }
              });
            }
            return optionsTranslated;
          };
          if (angular.isFunction(options)) {
            errorcb = successcb;
            successcb = options;
            options = {};
          }
          requestParams = angular.extend({}, defaultParams, preparyQueryParam(queryJson), prepareOptions(options));
          httpPromise = $http.get(collectionUrl);
          return promiseThen(httpPromise, successcb, errorcb, resourcesArrayRespTransform);
        };
        Resource.all = function(options, successcb, errorcb) {
          if (angular.isFunction(options)) {
            errorcb = successcb;
            successcb = options;
            options = {};
          }
          return Resource.query({}, options, successcb, errorcb);
        };
        Resource.count = function(queryJson, successcb, errorcb) {
          var httpPromise;

          httpPromise = $http.get(collectionUrl, {
            params: angular.extend({}, defaultParams, preparyQueryParam(queryJson), {
              c: true
            })
          });
          return promiseThen(httpPromise, successcb, errorcb, function(data) {
            return data;
          });
        };
        Resource.distinct = function(field, queryJson, successcb, errorcb) {
          var httpPromise;

          httpPromise = $http.post(dbUrl + "/runCommand", angular.extend({}, queryJson || {}, {
            distinct: collectionName,
            key: field
          }), {
            params: defaultParams
          });
          return promiseThen(httpPromise, successcb, errorcb, function(data) {
            return data.values;
          });
        };
        Resource.getById = function(id, successcb, errorcb) {
          var httpPromise;

          httpPromise = $http.get(collectionUrl + "/" + id, {
            params: defaultParams
          });
          return promiseThen(httpPromise, successcb, errorcb, resourceRespTransform);
        };
        Resource.getByObjectIds = function(ids, successcb, errorcb) {
          var qin;

          qin = [];
          angular.forEach(ids, function(id) {
            return qin.push({
              $oid: id
            });
          });
          return Resource.query({
            _id: {
              $in: qin
            }
          }, successcb, errorcb);
        };
        Resource.prototype.$id = function() {
          if (this._id && this._id.$oid) {
            return this._id.$oid;
          } else {
            if (this._id) {
              return this._id;
            }
          }
        };
        Resource.prototype.$save = function(successcb, errorcb) {
          var data, httpPromise;

          console.log('$save');
          config = {
            'headers': {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          };
          data = 'doc = ' + JSON.stringify({
            "uNam": this.uNam,
            "lNam": this.lNam,
            "fNam": this.fNam
          });
          httpPromise = $http.post(collectionUrl, data, config);
          return promiseThen(httpPromise, successcb, errorcb, resourceRespTransform);
        };
        Resource.prototype.$update = function(successcb, errorcb) {
          var httpPromise;

          httpPromise = $http.put(collectionUrl + "/" + this.$id(), angular.extend({}, this, {
            _id: undefined
          }), {
            params: defaultParams
          });
          return promiseThen(httpPromise, successcb, errorcb, resourceRespTransform);
        };
        Resource.prototype.$post = function(data, successcb, errorcb) {
          var httpPromise;

          console.log('$post', data);
          httpPromise = $http.post(collectionUrl, data, config);
          return promiseThen(httpPromise, successcb, errorcb, resourceRespTransform);
        };
        Resource.prototype.$put = function(data, successcb, errorcb) {
          var httpPromise;

          console.log('$put', this.etag);
          console.log('tkn', this.tkn);
          config = {
            'headers': {
              'If-Match': this.etag
            }
          };
          data = JSON.stringify({
            "actions": {
              "$set": {
                "flds": {
                  "uNam": this.uNam,
                  "lNam": this.lNam,
                  "fNam": this.fNam
                }
              }
            }
          });
          httpPromise = $http.put(collectionUrl + "/" + this.$id(), data, config);
          return promiseThen(httpPromise, successcb, errorcb, resourceRespTransform);
        };
        Resource.prototype.$remove = function(successcb, errorcb) {
          var httpPromise;

          httpPromise = $http["delete"](collectionUrl + "/" + this.$id(), {
            params: defaultParams
          });
          return promiseThen(httpPromise, successcb, errorcb, resourceRespTransform);
        };
        Resource.prototype.$saveOrUpdate = function(savecb, updatecb, errorSavecb, errorUpdatecb) {
          console.log('saveOrUpdate');
          if (this.$id()) {
            return this.$put(updatecb, errorUpdatecb);
          } else {
            return this.$save(savecb, errorSavecb);
          }
        };
        return Resource;
      };
      return XchgLabResourceFactory;
    }
  ]);

}).call(this);
